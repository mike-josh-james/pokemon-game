{"version":3,"sources":["../src/querybuilder.js"],"names":["request","require","config","curryN","merge","prop","Emitter","get","type","page","args","uri","endpoint","qs","json","then","module","exports","find","id","where","all","emitter","getEmit","items","length","forEach","trigger","c","catch","err"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,iBAAR,CAAhB;AACA,IAAMC,SAASD,QAAQ,aAAR,CAAf;;eACgCA,QAAQ,OAAR,C;IAAxBE,M,YAAAA,M;IAAQC,K,YAAAA,K;IAAOC,I,YAAAA,I;;AACvB,IAAMC,UAAUL,QAAQ,WAAR,CAAhB;;AAEA,IAAMM,MAAMJ,OAAO,CAAP,EAAU,UAACK,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAsB;AAC1C,SAAOV,QAAQ;AACbW,SAAQT,OAAOU,QAAf,SAA2BJ,IADd;AAEbK,QAAIT,MAAMM,IAAN,EAAY;AACdD;AADc,KAAZ,CAFS;AAKbK,UAAM;AALO,GAAR,EAMJC,IANI,CAMCV,KAAKG,IAAL,CAND,CAAP;AAOD,CARW,CAAZ;;AAUAQ,OAAOC,OAAP,GAAiB;AAAA,SAAS;;AAExB;AACAC,UAAM;AAAA,aAAMlB,QAAQ;AAClBW,aAAQT,OAAOU,QAAf,SAA2BJ,IAA3B,SAAmCW,EADjB;AAElBL,cAAM;AAFY,OAAR,CAAN;AAAA,KAHkB;;AAQxB;AACAM,WAAOb,IAAIC,IAAJ,EAAU,CAAV,CATiB;;AAWxB;;;;;;AAMAa,SAAK,mBAAQ;AACX,UAAMC,UAAU,IAAIhB,OAAJ,EAAhB;AACA,UAAMiB,UAAU,SAAVA,OAAU,CAACf,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAsB;AACpC,eAAOH,IAAIC,IAAJ,EAAUC,IAAV,EAAgBC,IAAhB,EACNK,IADM,CACD,iBAAS;AACb,cAAIS,MAAMC,MAAN,GAAe,CAAnB,EAAsB;AACpBD,kBAAME,OAAN,CAAc;AAAA,qBAAKJ,QAAQK,OAAR,CAAgB,MAAhB,EAAwBC,CAAxB,CAAL;AAAA,aAAd;AACA,mBAAOL,QAAQf,IAAR,EAAcC,OAAO,CAArB,EAAwBC,IAAxB,CAAP,CAFoB,CAEiB;AACtC,WAHD,MAGO;AACLY,oBAAQK,OAAR,CAAgB,KAAhB;AACD;AACF,SARM,EASNE,KATM,CASA;AAAA,iBAAOP,QAAQK,OAAR,CAAgB,OAAhB,EAAyBG,GAAzB,CAAP;AAAA,SATA,CAAP;AAUD,OAXD;AAYAP,cAAQf,IAAR,EAAc,CAAd,EAAiBE,IAAjB;;AAEA,aAAOY,OAAP;AACD;;AAlCuB,GAAT;AAAA,CAAjB","file":"querybuilder.js","sourcesContent":["const request = require('request-promise')\r\nconst config = require('./config.js')\r\nconst { curryN, merge, prop } = require('ramda')\r\nconst Emitter = require('emitter20')\r\n\r\nconst get = curryN(3, (type, page, args) => {\r\n  return request({\r\n    uri: `${config.endpoint}/${type}`,\r\n    qs: merge(args, {\r\n      page\r\n    }),\r\n    json: true\r\n  }).then(prop(type))\r\n})\r\n\r\nmodule.exports = type => ({\r\n\r\n  /** Gets a resource by its id. */\r\n  find: id => request({\r\n    uri: `${config.endpoint}/${type}/${id}`,\r\n    json: true\r\n  }),\r\n\r\n  /** Gets a resource with a given query. */\r\n  where: get(type, 1),\r\n\r\n  /** Gets a resource with a given query (like where), but\r\n      returns an emitter that emits 3 events:\r\n      - data(card): emits a card when it is retrieved from the API\r\n      - error(err): emits an error if the request fails\r\n      - end(): called when all results have been retrieved\r\n  */\r\n  all: args => {\r\n    const emitter = new Emitter()\r\n    const getEmit = (type, page, args) => {\r\n      return get(type, page, args)\r\n      .then(items => {\r\n        if (items.length > 0) {\r\n          items.forEach(c => emitter.trigger('data', c))\r\n          return getEmit(type, page + 1, args) // RECURSION\r\n        } else {\r\n          emitter.trigger('end')\r\n        }\r\n      })\r\n      .catch(err => emitter.trigger('error', err))\r\n    }\r\n    getEmit(type, 1, args)\r\n\r\n    return emitter\r\n  }\r\n\r\n})\r\n"]}